{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/chat/chat.component.css","webpack:///./src/app/chat/chat.component.html","webpack:///./src/app/chat/chat.component.ts","webpack:///./src/app/chat/chat.module.ts","webpack:///./src/app/chat/dialog-user/dialog-user-type.ts","webpack:///./src/app/chat/dialog-user/dialog-user.component.css","webpack:///./src/app/chat/dialog-user/dialog-user.component.html","webpack:///./src/app/chat/dialog-user/dialog-user.component.ts","webpack:///./src/app/chat/shared/model/action.ts","webpack:///./src/app/chat/shared/model/event.ts","webpack:///./src/app/chat/shared/services/socket.service.ts","webpack:///./src/app/shared/material/material.module.ts","webpack:///./src/app/shared/shared.module.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts","webpack:///ws (ignored)"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ChatComponent } from './chat/chat.component';\n\nconst routes: Routes = [\n  {\n    path: '', component: ChatComponent\n  }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","module.exports = \".app-content {\\n  width: 100%;\\n  height: 100%;\\n  box-sizing: border-box;\\n} \"","module.exports = \"<mat-sidenav-container fullscreen>\\n  <mat-sidenav #sidenav>\\n    <mat-nav-list>\\n      <a mat-list-item href=\\\"https://luixaviles.com\\\" target=\\\"_blank\\\">\\n        <mat-icon mat-list-icon>person</mat-icon>\\n        <span mat-line>Author</span>\\n      </a>\\n      <a mat-list-item href=\\\"https://github.com/luixaviles/socket-io-typescript-chat\\\" target=\\\"_blank\\\">\\n        <mat-icon mat-list-icon>code</mat-icon>\\n        <span mat-line>Source Code</span>\\n      </a>\\n      <a mat-list-item href=\\\"https://medium.com/dailyjs/real-time-apps-with-typescript-integrating-web-sockets-node-angular-e2b57cbd1ec1\\\" target=\\\"_blank\\\">\\n        <mat-icon mat-list-icon>web</mat-icon>\\n        <span mat-line>Blog Post</span>\\n      </a>\\n    </mat-nav-list>\\n  </mat-sidenav>\\n\\n  <div>\\n    <mat-toolbar color=\\\"primary\\\">\\n      <button mat-icon-button (click)=\\\"sidenav.toggle()\\\">\\n      <mat-icon>menu</mat-icon>\\n    </button>\\n      <span>Typescript Chat</span>\\n    </mat-toolbar>\\n\\n    <div class=\\\"app-content\\\">\\n      <router-outlet></router-outlet>\\n    </div>\\n  </div>\\n</mat-sidenav-container>\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent implements OnInit {\n\n  ngOnInit(): void {\n  }\n\n  private initModel(): void {\n  }\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { NgModule } from '@angular/core';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { ChatModule } from './chat/chat.module';\nimport { SharedModule } from './shared/shared.module';\n\n@NgModule({\n  declarations: [\n    AppComponent\n  ],\n  imports: [\n    BrowserModule,\n    BrowserAnimationsModule,\n    AppRoutingModule,\n    ChatModule,\n    SharedModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"[mat-fab] {\\n    position: absolute;\\n    right: 2%;\\n    top: 35px;\\n    z-index: 1;\\n}\\n\\n.chat-container {\\n    position: fixed;\\n    width: 100%; \\n    height: 100%;  \\n}\\n\\n.chat-input {\\n    padding-top: 20px;\\n    width: 80%; \\n}\\n\\n.chat-list {\\n    overflow: auto;\\n    position: fixed;\\n    top: 90px;\\n    left: 25px;\\n    right: 25px;\\n    bottom: 120px;\\n}\\n\\n.chat-list-item {\\n    margin-top: 2px;\\n    margin-bottom: 2px;\\n    border-radius: 5px;\\n    background-color: #E8EAF6;\\n}\\n\\n.main-card {\\n    height: 100%;  \\n}\\n\\n.chat-footer-container {\\n    position:fixed;\\n    bottom:25px;\\n    left:25px;\\n    right:25px;\\n}\\n\\n.chat-notification {\\n    text-align: center;\\n}\"","module.exports = \"<button mat-fab (click)=\\\"onClickUserInfo()\\\">\\n  <mat-icon>person</mat-icon>\\n</button>\\n<div class=\\\"chat-container\\\">\\n  <mat-card class=\\\"main-card\\\">\\n    <mat-list class=\\\"chat-list\\\">\\n      <mat-list-item *ngFor=\\\"let message of messages\\\" [ngClass]=\\\"[(message.action === undefined && message.from.id === user.id)? 'chat-list-item': '']\\\">\\n        <img mat-list-avatar *ngIf=\\\"message.action === undefined\\\" [src]=\\\"message.from.avatar\\\">\\n        <h4 mat-line *ngIf=\\\"message.action === undefined\\\">\\n          <b>{{message.from.name}}</b>\\n        </h4>\\n        <p mat-line *ngIf=\\\"message.action === undefined\\\">\\n          <span> {{message.content}} </span>\\n        </p>\\n        <p mat-line *ngIf=\\\"message.action === action.JOINED\\\" class=\\\"chat-notification\\\">\\n          <span> <b>{{message.from.name}}</b> joined to the conversation. </span>\\n        </p>\\n        <p mat-line *ngIf=\\\"message.action === action.RENAME\\\" class=\\\"chat-notification\\\">\\n          <span> <b>{{message.content.previousUsername}}</b> is now <b>{{message.content.username}}</b> </span>\\n        </p>\\n      </mat-list-item>\\n    </mat-list>\\n    <div class=\\\"chat-footer-container\\\">\\n      <mat-icon>message</mat-icon>\\n      <mat-form-field class=\\\"chat-input\\\">\\n        <input matInput \\n               #inputMessage \\n               maxlength=\\\"140\\\" \\n               placeholder=\\\"Type your message\\\" \\n               [(ngModel)]=\\\"messageContent\\\" \\n               (keyup.enter)=\\\"sendMessage(messageContent)\\\">\\n        <mat-hint align=\\\"end\\\">{{inputMessage.value.length}}/140</mat-hint>\\n      </mat-form-field>\\n    </div>\\n  </mat-card>\\n</div>\"","import { Component, OnInit, ViewChildren, ViewChild, AfterViewInit, QueryList, ElementRef } from '@angular/core';\nimport { MatDialog, MatDialogRef, MatList, MatListItem } from '@angular/material';\n\nimport { Action } from './shared/model/action';\nimport { Event } from './shared/model/event';\nimport { Message } from './shared/model/message';\nimport { User } from './shared/model/user';\nimport { SocketService } from './shared/services/socket.service';\nimport { DialogUserComponent } from './dialog-user/dialog-user.component';\nimport { DialogUserType } from './dialog-user/dialog-user-type';\n\n\nconst AVATAR_URL = 'https://api.adorable.io/avatars/285';\n\n@Component({\n  selector: 'app-chat',\n  templateUrl: './chat.component.html',\n  styleUrls: ['./chat.component.css']\n})\nexport class ChatComponent implements OnInit, AfterViewInit {\n  action = Action;\n  user: User;\n  messages: Message[] = [];\n  messageContent: string;\n  ioConnection: any;\n  dialogRef: MatDialogRef<DialogUserComponent> | null;\n  defaultDialogUserParams: any = {\n    disableClose: true,\n    data: {\n      title: 'Welcome',\n      dialogType: DialogUserType.NEW\n    }\n  };\n\n  // getting a reference to the overall list, which is the parent container of the list items\n  @ViewChild(MatList, { read: ElementRef }) matList: ElementRef;\n\n  // getting a reference to the items/messages within the list\n  @ViewChildren(MatListItem, { read: ElementRef }) matListItems: QueryList<MatListItem>;\n\n  constructor(private socketService: SocketService,\n    public dialog: MatDialog) { }\n\n  ngOnInit(): void {\n    this.initModel();\n    // Using timeout due to https://github.com/angular/angular/issues/14748\n    setTimeout(() => {\n      this.openUserPopup(this.defaultDialogUserParams);\n    }, 0);\n  }\n\n  ngAfterViewInit(): void {\n    // subscribing to any changes in the list of items / messages\n    this.matListItems.changes.subscribe(elements => {\n      this.scrollToBottom();\n    });\n  }\n\n  // auto-scroll fix: inspired by this stack overflow post\n  // https://stackoverflow.com/questions/35232731/angular2-scroll-to-bottom-chat-style\n  private scrollToBottom(): void {\n    try {\n      this.matList.nativeElement.scrollTop = this.matList.nativeElement.scrollHeight;\n    } catch (err) {\n    }\n  }\n\n  private initModel(): void {\n    const randomId = this.getRandomId();\n    this.user = {\n      id: randomId,\n      avatar: `${AVATAR_URL}/${randomId}.png`\n    };\n  }\n\n  private initIoConnection(): void {\n    this.socketService.initSocket();\n\n    this.ioConnection = this.socketService.onMessage()\n      .subscribe((message: Message) => {\n        this.messages.push(message);\n      });\n\n\n    this.socketService.onEvent(Event.CONNECT)\n      .subscribe(() => {\n        console.log('connected');\n      });\n\n    this.socketService.onEvent(Event.DISCONNECT)\n      .subscribe(() => {\n        console.log('disconnected');\n      });\n  }\n\n  private getRandomId(): number {\n    return Math.floor(Math.random() * (1000000)) + 1;\n  }\n\n  public onClickUserInfo() {\n    this.openUserPopup({\n      data: {\n        username: this.user.name,\n        title: 'Edit Details',\n        dialogType: DialogUserType.EDIT\n      }\n    });\n  }\n\n  private openUserPopup(params): void {\n    this.dialogRef = this.dialog.open(DialogUserComponent, params);\n    this.dialogRef.afterClosed().subscribe(paramsDialog => {\n      if (!paramsDialog) {\n        return;\n      }\n\n      this.user.name = paramsDialog.username;\n      if (paramsDialog.dialogType === DialogUserType.NEW) {\n        this.initIoConnection();\n        this.sendNotification(paramsDialog, Action.JOINED);\n      } else if (paramsDialog.dialogType === DialogUserType.EDIT) {\n        this.sendNotification(paramsDialog, Action.RENAME);\n      }\n    });\n  }\n\n  public sendMessage(message: string): void {\n    if (!message) {\n      return;\n    }\n\n    this.socketService.send({\n      from: this.user,\n      content: message\n    });\n    this.messageContent = null;\n  }\n\n  public sendNotification(params: any, action: Action): void {\n    let message: Message;\n\n    if (action === Action.JOINED) {\n      message = {\n        from: this.user,\n        action: action\n      };\n    } else if (action === Action.RENAME) {\n      message = {\n        action: action,\n        content: {\n          username: this.user.name,\n          previousUsername: params.previousUsername\n        }\n      };\n    }\n\n    this.socketService.send(message);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\nimport { MaterialModule } from '../shared/material/material.module';\n\nimport { ChatComponent } from './chat.component';\nimport { SocketService } from './shared/services/socket.service';\nimport { DialogUserComponent } from './dialog-user/dialog-user.component';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    FormsModule,\n    ReactiveFormsModule,\n    MaterialModule\n  ],\n  declarations: [ChatComponent, DialogUserComponent],\n  providers: [SocketService],\n  entryComponents: [DialogUserComponent]\n})\nexport class ChatModule { }\n","export enum DialogUserType {\n    NEW,\n    EDIT\n}\n","module.exports = \".mat-dialog-content {\\n    overflow: hidden;\\n}\"","module.exports = \"<h2 mat-dialog-title>{{params.title}}</h2>\\n\\n<mat-dialog-content>\\n  <mat-form-field>\\n    <input matInput name=\\\"username\\\" placeholder=\\\"Username\\\" \\n           [(ngModel)]=\\\"params.username\\\" (keyup.enter)=\\\"onSave()\\\" [formControl]=\\\"usernameFormControl\\\" required>\\n    <mat-error>This field is required</mat-error>\\n    <mat-hint>Please type your username</mat-hint>\\n  </mat-form-field>\\n</mat-dialog-content>\\n\\n<mat-dialog-actions *ngIf=\\\"params?.typeDialog === 'new-user'\\\" [attr.align]=\\\"'end'\\\">\\n  <button mat-raised-button color=\\\"primary\\\" mat-dialog-close (click)=\\\"onSave()\\\" [disabled]=\\\"usernameFormControl.hasError('required')\\\">Chat!</button>\\n</mat-dialog-actions>\\n\\n<mat-dialog-actions *ngIf=\\\"params?.typeDialog === 'edit-user'\\\" [attr.align]=\\\"'end'\\\">\\n  <button mat-button mat-dialog-close color=\\\"secondary\\\">Close</button>\\n  <button mat-raised-button color=\\\"primary\\\" mat-dialog-close (click)=\\\"onSave()\\\">Save</button>\\n</mat-dialog-actions>\"","import { Component, OnInit, Inject } from '@angular/core';\nimport { MatDialogRef, MAT_DIALOG_DATA } from '@angular/material';\nimport { FormControl, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-dialog-user',\n  templateUrl: './dialog-user.component.html',\n  styleUrls: ['./dialog-user.component.css']\n})\nexport class DialogUserComponent implements OnInit {\n  usernameFormControl = new FormControl('', [Validators.required]);\n  previousUsername: string;\n\n  constructor(public dialogRef: MatDialogRef<DialogUserComponent>,\n    @Inject(MAT_DIALOG_DATA) public params: any) {\n    this.previousUsername = params.username ? params.username : undefined;\n  }\n\n  ngOnInit() {\n  }\n\n  public onSave(): void {\n    this.dialogRef.close({\n      username: this.params.username,\n      dialogType: this.params.dialogType,\n      previousUsername: this.previousUsername\n    });\n  }\n}\n","export enum Action {\n    JOINED,\n    LEFT,\n    RENAME\n}\n","export enum Event {\n    CONNECT = 'connect',\n    DISCONNECT = 'disconnect'\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, Observer } from 'rxjs';\n\n// Models\nimport { Event } from '../model/event';\nimport { Message } from '../model/message';\n\n// SocketIO\nimport * as socketIO from 'socket.io-client';\n\n// Settings\n// const url: String = 'https://localhost:8080';\n// const url: String = 'https://socket-2e1ee.firebaseapp.com';\n// const url: String = 'https://us-central1-socket-2e1ee.cloudfunctions.net/app';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class SocketService {\n  private socket;\n\n  public initSocket(): void {\n    this.socket = socketIO(':8080');\n  }\n\n  public send(message: Message) {\n    this.socket.emit('message', message);\n  }\n\n  public onMessage(): Observable<Message> {\n    return new Observable<Message>(observer => {\n      this.socket.on('message', (data: Message) => observer.next(data));\n    });\n  }\n\n  public onEvent(event: Event): Observable<any> {\n    return new Observable<Event>(observer => {\n      this.socket.on('event', () => observer.next());\n    });\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport {\n  MatButtonModule,\n  MatCardModule,\n  MatDialog,\n  MatDialogModule,\n  MatIconModule,\n  MatFormFieldModule,\n  MatInputModule,\n  MatListModule,\n  MatSidenavModule,\n  MatToolbarModule,\n} from '@angular/material';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MatButtonModule,\n    MatCardModule,\n    MatDialogModule,\n    MatIconModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatListModule,\n    MatSidenavModule,\n    MatToolbarModule,\n  ],\n  exports: [\n    MatButtonModule,\n    MatCardModule,\n    MatDialogModule,\n    MatIconModule,\n    MatFormFieldModule,\n    MatInputModule,\n    MatListModule,\n    MatSidenavModule,\n    MatToolbarModule,\n  ],\n  declarations: [],\n  providers: [\n    MatDialog\n  ]\n})\nexport class MaterialModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { MaterialModule } from './material/material.module';\n\n@NgModule({\n  imports: [\n    CommonModule,\n    MaterialModule\n  ],\n  exports: [MaterialModule],\n  declarations: []\n})\nexport class SharedModule { }\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n","/* (ignored) */"],"sourceRoot":""}